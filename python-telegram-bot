import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
import os

# .env faylidan tokenni o‘qish
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Logging sozlash
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# /start buyrug‘i uchun funksiya
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Salom! Men xabarlar haqida ma\'lumot beraman. Xabar yuboring, men kimdan va qanday xabar kelganini ko‘rsataman.')

# Xabarni qayta ishlash funksiyasi
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    username = user.username if user.username else "Noma'lum foydalanuvchi"
    user_id = user.id
    text = message.text if message.text else "Matnsiz xabar"
    date = message.date

    # Xabar ma'lumotlarini shakllantirish
    response = (
        f"Xabar keldi:\n"
        f"Kimdan: {username} (ID: {user_id})\n"
        f"Xabar: {text}\n"
        f"Vaqt: {date}"
    )

    # Javob yuborish
    await update.message.reply_text(response)

# Xato yuzaga kelganda
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning(f"Xato yuz berdi: {context.error}")

def main():
    # Application ob'ektini yaratish
    application = Application.builder().token(BOT_TOKEN).build()

    # /start buyrug‘i uchun handler
    application.add_handler(CommandHandler("start", start))

    # Xabarlar uchun handler (faqat matnli xabarlar)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Xato handler
    application.add_error_handler(error)

    # Botni ishga tushirish
    print("Bot ishga tushdi...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
