import logging
import os
import requests
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# .env o'qish
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Tillarni saqlash (foydalanuvchi ID bo'yicha)
user_languages = {}

# Google Books API
BOOKS_API_URL = "https://www.googleapis.com/books/v1/volumes"

# Til matnlari
TEXTS = {
    'uz': {
        'start': 'Salom! Botga xush kelibsiz. Tilni tanlang:',
        'lang_selected': 'Til tanlandi: O\'zbek. Endi kitob qidirishingiz mumkin.',
        'main_menu': 'Asosiy menyu. Buyruq tanlang:',
        'search_book': 'Kitob qidirish',
        'my_library': 'Mening kutubxonam',
        'settings': 'Sozlamalar',
        'enter_book': 'Kitob nomini kiriting:',
        'search_results': 'Natijalar:',
        'no_results': 'Natija topilmadi.',
        'error': 'Xato yuz berdi.'
    },
    'ru': {
        'start': 'Привет! Добро пожаловать в бот. Выберите язык:',
        'lang_selected': 'Язык выбран: Русский. Теперь вы можете искать книги.',
        'main_menu': 'Главное меню. Выберите команду:',
        'search_book': 'Поиск книги',
        'my_library': 'Моя библиотека',
        'settings': 'Настройки',
        'enter_book': 'Введите название книги:',
        'search_results': 'Результаты:',
        'no_results': 'Результаты не найдены.',
        'error': 'Произошла ошибка.'
    },
    'en': {
        'start': 'Hello! Welcome to the bot. Select language:',
        'lang_selected': 'Language selected: English. Now you can search books.',
        'main_menu': 'Main menu. Select command:',
        'search_book': 'Search Book',
        'my_library': 'My Library',
        'settings': 'Settings',
        'enter_book': 'Enter book title:',
        'search_results': 'Results:',
        'no_results': 'No results found.',
        'error': 'An error occurred.'
    }
}

def get_text(user_id: int, key: str) -> str:
    lang = user_languages.get(user_id, 'uz')
    return TEXTS[lang][key]

# Til tanlash keyboard
def get_language_keyboard():
    keyboard = [
        [InlineKeyboardButton("🇺🇿 O'zbek", callback_data='lang_uz')],
        [InlineKeyboardButton("🇷🇺 Русский", callback_data='lang_ru')],
        [InlineKeyboardButton("🇺🇸 English", callback_data='lang_en')]
    ]
    return InlineKeyboardMarkup(keyboard)

# Asosiy keyboard (3 tugma)
def get_main_keyboard(lang: str):
    keyboard = [
        [KeyboardButton(TEXTS[lang]['search_book'])],
        [KeyboardButton(TEXTS[lang]['my_library'])],
        [KeyboardButton(TEXTS[lang]['settings'])]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Kitob qidirish
def search_books(query: str, max_results=3):
    params = {'q': query, 'maxResults': max_results}
    try:
        response = requests.get(BOOKS_API_URL, params=params)
        data = response.json()
        if 'items' in data:
            results = []
            for item in data['items']:
                volume = item['volumeInfo']
                title = volume.get('title', 'N/A')
                authors = ', '.join(volume.get('authors', ['N/A']))
                results.append(f"📖 {title}\n✍️ {authors}")
            return '\n\n'.join(results)
        return None
    except Exception:
        return None

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_languages:
        await update.message.reply_text(get_text(user_id, 'start'), reply_markup=get_language_keyboard())
    else:
        await update.message.reply_text(get_text(user_id, 'main_menu'), reply_markup=get_main_keyboard(user_languages[user_id]))

# Til callback
async def lang_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = query.data.split('_')[1]
    user_languages[user_id] = lang
    await query.edit_message_text(get_text(user_id, 'lang_selected') + '\n\n' + get_text(user_id, 'main_menu'),
                                  reply_markup=get_main_keyboard(lang))

# Tugma bosilganda (xabar)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_languages.get(user_id, 'uz')
    text = update.message.text

    if text == get_text(user_id, 'search_book'):
        await update.message.reply_text(get_text(user_id, 'enter_book'))
        context.user_data['awaiting_book'] = True
    elif text == get_text(user_id, 'my_library'):
        await update.message.reply_text('Kutubxona funksiyasi keyinroq qo\'shiladi.')  # Placeholder
    elif text == get_text(user_id, 'settings'):
        await update.message.reply_text('Sozlamalar: Til o\'zgartirish /lang')
    else:
        if context.user_data.get('awaiting_book'):
            results = search_books(text)
            if results:
                await update.message.reply_text(get_text(user_id, 'search_results') + '\n\n' + results)
            else:
                await update.message.reply_text(get_text(user_id, 'no_results'))
            context.user_data['awaiting_book'] = False
        else:
            await update.message.reply_text(get_text(user_id, 'main_menu'), reply_markup=get_main_keyboard(lang))

# Xato
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning(f'Update {update} caused error {context.error}')
    if update and update.message:
        await update.message.reply_text(get_text(update.effective_user.id, 'error'))

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(lang_callback, pattern='^lang_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    print("Bot ishga tushdi...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
